
---
- name: 'Install Kong APISecOps Demo'
  hosts: localhost
  connection: local
  tasks: 

    - name: Install Operators 
      kubernetes.core.k8s: 
        state: present
        src: "{{ item }}"
      loop: 
        - ../operator/subs-pipelines.yaml
        - ../operator/subs-cert-manager.yaml

    - name: Create App Namespaces
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ item }}"
        state: present
      loop: 
        - disputes-apispec
        - disputes-dev
        - apiops-gateway
        - gitea

# deploy gitea and configure gitea 
    - name: Deploy Gitea ConfigMap
      kubernetes.core.k8s:
        state: present
        namespace: gitea
        src: "../gitea/gitea-configmap.yaml"
    
    - name: Deploy Gitea 
      kubernetes.core.k8s:
        state: present
        namespace: gitea
        src: "../gitea/gitea.yaml" 

    - name: Deploy Gitea 
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: gitea
            namespace: gitea
        wait: yes 
        wait_condition:
          type: Available
          status: True
          reason: MinimumReplicasAvailable

    - name: Gitea Init Tekton TaskRun 
      kubernetes.core.k8s:
        state: present
        namespace: gitea
        src: "../gitea/gitea-init-taskrun.yaml"

# deploy general secrets to app namespaces 
    - name: Fetch the github-token secret to App Namespaces
      shell: |
        kubectl get secret github-token --namespace gitea -o yaml | sed 's/namespace: .*/namespace: {{item}}/' | kubectl apply -f -
      loop: 
        - disputes-apispec
        - apiops-gateway 
      register: ret
      failed_when: 
        - ret.rc == 1 
        - "'error when patching' not in ret.stderr"

    - name: Deploy Pipeline Secrets
      kubernetes.core.k8s:
        state: present 
        namespace: "{{ item }}"
        template: "../pipeline/config/pipeline-secrets.j2.yaml"
      loop: 
        - disputes-apispec
        - apiops-gateway 

# configure Disputes ApiSpec Namespace
    - name: Apply Tekton Tasks to Disputes Namespace
      kubernetes.core.k8s: 
        state: present 
        namespace: disputes-apispec
        src: "{{ item }}"
      loop: 
        - ../tasks/tekton-hub/github-open-pr.yaml
        - ../tasks/tekton-hub/git-cli.yaml
        - ../tasks/kong-tekton-tasks/deck-cli/0.1/deck-cli.yaml
        - ../tasks/kong-tekton-tasks/inso-cli/0.1/inso-cli.yaml
    
    - name: Apply Disputes Pipeline 
      kubernetes.core.k8s: 
        state: present
        namespace: disputes-apispec
        src: "../pipeline/disputes-team-pipeline.yaml"
    

# configure ApiOps-gateway Namespace
    - name: Apply Tekton Tasks to APIOps Namespace
      kubernetes.core.k8s: 
        state: present 
        namespace: apiops-gateway
        src: "{{ item }}"
      loop: 
        - ../tasks/tekton-hub/git-cli.yaml
        - ../tasks/tekton-hub/yq.yaml
        - ../tasks/tekton-hub/github-close-issue.yaml
        - ../tasks/kong-tekton-tasks/deck-cli/0.1/deck-cli.yaml
        - ../tasks/kong-tekton-tasks/inso-cli/0.1/inso-cli.yaml

    - name: Apply APIOps Pipeline
      kubernetes.core.k8s: 
        state: present
        namespace: apiops-gateway
        src: "../pipeline/apiops-team-pipeline.yaml"
    
    - name: Get Gitea Route 
      set_fact: 
        gitea_route: "{{ query('kubernetes.core.k8s', kind='Route', namespace='gitea', resource_name='gitea') | first }}"

    - name: Copy PipelineRun Template to Run Location 
      ansible.builtin.template: 
        src: "../pipeline/pipeline-run/{{ item }}.j2"
        dest: "../run/{{ item }}.yaml"
      vars: 
        github_domain: "{{ gitea_route.spec.host }}"
        protocol: http
      loop: 
        - disputes-pipeline-run
        - apiops-sandbox-pipeline-run

  # Konnect 
    - name: Create Konnect Dataplane Namespaces
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ item }}"
        state: present
      loop: 
        - kong-sandbox 
        - kong-dev

    - name: Create the SelfSigned Issuer
      kubernetes.core.k8s: 
        state: present
        src: "../operator/cert-manager/cluster_issuer_selfsigned.yaml"

    - name: Wait for the SelfSigned Issuer to be Ready 
      kubernetes.core.k8s:
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: selfsigned-issuer
        wait: yes 
        wait_condition:
          type: Ready
          status: True
          reason: IsReady

    - name: Create the Dataplane Certificates
      kubernetes.core.k8s: 
        state: present
        src: "{{ item }}"
      loop: 
        - ../operator/cert-manager/konnect-sandbox-crt.yaml
        - ../operator/cert-manager/konnect-dev-crt.yaml
    
    - name: Create Cert Vars 
      ansible.builtin.set_fact: 
        sandbox_crt: "{{ query('kubernetes.core.k8s', kind='Secret', namespace='kong-sandbox', resource_name='konnect-sandbox-crt') | first }}"
        dev_crt: "{{ query('kubernetes.core.k8s', kind='Secret', namespace='kong-dev', resource_name='konnect-dev-crt') | first }}"

    - name: Base64 Decode Certs
      ansible.builtin.set_fact: 
        sandbox_crt_raw: "{{ sandbox_crt.data['tls.crt'] | b64decode }}"
        dev_crt_raw: "{{ dev_crt.data['tls.crt'] | b64decode }}"
    
    - name: Awk Cert - Sandbox
      ansible.builtin.shell: |
        echo "{{ sandbox_crt_raw }}" | awk '{printf "%s\\n", $0}'
      register: sandbox_res
    
    - name: Awk Cert - Dev
      ansible.builtin.shell: |
        echo "{{ dev_crt_raw }}" | awk '{printf "%s\\n", $0}'
      register: dev_res

    - name: Get Certs from Awk Output
      ansible.builtin.set_fact: 
       sandbox_crt: "{{ sandbox_res.stdout }}"
       dev_crt: "{{ dev_res.stdout }}"
        
    - name: Sandbox Cert Prepped for Konnect
      debug: 
        var: sandbox_crt

    - name: Dev Cert Prepped for Konnect
      debug: 
        var: sandbox_crt

    - name: Push Certificates to Konnect
      block:
        - name: Authenticate to Konnect
          ansible.builtin.uri:
            url: "https://{{ base_url }}/kauth/api/v1/authenticate"
            method: POST
            body_format: json
            body: '{ "username": "{{ konnect_email }}", "password":"{{ konnect_pass }}" }'
            return_content: yes
          register: login

        - name: login output response
          debug: 
            var: login

        - name: GET Konnect Control Plane Data
          ansible.builtin.uri:
            url: "https://{{ base_url }}/api/runtime_groups/{{ konnect_controlPlane }}"
            method: GET
            return_content: yes
            headers:
              Cookie: "{{ login.cookies_string }}"
          register: cp_content

        - name: Control Plane Facts
          ansible.builtin.set_fact:
            konnect_cp_id: "{{ cp_content.json['id'] }}"
            konnect_cp_name: "{{ cp_content.json['name']}}"
            konnect_cp_endpoint: "{{ cp_content.json['config']['cp_outlet'] | regex_replace('https://') | regex_replace('/') }}"
            konnect_tp_endpoint: "{{cp_content.json['config']['telemetry_endpoint'] | regex_replace('https://') | regex_replace('/') }}"

        - debug: 
            msg: '{ "name": "{{ konnect_cp_name }}", "id" :"{{ konnect_cp_id }}", "certificates": ["{{ sandbox_crt }}"] }'

        - name: PUT Dataplane Certs to Konnect
          ansible.builtin.uri:
            url: "https://{{ base_url }}/api/runtime_groups/{{ konnect_controlPlane }}"
            method: PUT
            body_format: json
            body: '{ "name": "{{ konnect_cp_name }}", "id" :"{{ konnect_cp_id }}", "certificates": ["{{ sandbox_crt }}, {{ dev_crt }}"] }'
            headers:
              Cookie: "{{ login.cookies_string }}"
          register: cert_request
        
        - name: output cert_request
          debug:
            var: cert_request

      vars:
        base_url: "cloud.konghq.com"
    
    - name: Install Konnect Gateway Dataplane - Helm
      block:
        - name: Add Kong Chart
          kubernetes.core.helm_repository:
            name: kong
            repo_url: "https://charts.konghq.com"
            repo_state: present

        - name: Deploy Sandbox Dataplane
          kubernetes.core.helm:
            name: kong-sandbox
            chart_ref: kong/kong
            release_namespace: kong-sandbox
            values:
              image:
                repository: kong/kong-gateway
                tag: "3.0.0.0"
              secretVolumes:
              - konnect-sandbox-crt
              admin:
                enabled: false
              env:
                role: data_plane
                database: "off"
                cluster_mtls: pki
                cluster_control_plane: "{{ konnect_cp_endpoint }}:443"
                cluster_server_name: "{{ konnect_cp_endpoint }}"
                cluster_telemetry_endpoint: "{{ konnect_tp_endpoint }}:443"
                cluster_telemetry_server_name: "{{ konnect_tp_endpoint }}"
                cluster_cert: /etc/secrets/konnect-sandbox-crt/tls.crt
                cluster_cert_key: /etc/secrets/konnect-sandbox-crt/tls.key
                lua_ssl_trusted_certificate: system
                konnect_mode: "on"
                vitals: "off"
              ingressController:
                enabled: false
                installCRDs: false


    

